T.c --> O((m*n)^2)
S.c --> O(1)

class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        int max = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1') {
                    int curr = 1;
                    boolean flag = true;

                    // Expand the square size while all boundaries are '1'
                    while (i + curr < m && j + curr < n && flag) {
                        // Check only the new row and column of the square
                        for (int k = 0; k <= curr; k++) {
                            if (matrix[i + curr][j + k] != '1' || matrix[i + k][j + curr] != '1') {
                                flag = false;
                                break;
                            }
                        }

                        if (flag) {
                            curr++;
                        }
                    }
                    max = Math.max(max, curr);
                }
            }
        }
        return max * max;

    }
}

*************************************************************

T.s --> O(m*n)
S.c --> O(m*n)

class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int max = 0;
        int[][] dp = new int[m+1][n+1];
        for(int i =1; i<m+1; i++){
            for(int j =1; j<n+1; j++){
                if(matrix[i-1][j-1] == '1'){
                  dp[i][j] = 1+Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));
                }else{
                  dp[i][j] = 0;
                }   
                max = Math.max(max, dp[i][j]);             
            }
        }
        return max*max;
    }
}

*************************************************************
T.c--> O(m*n)
S.c --> O(n)

class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0){
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int max = 0;
        int[] dp = new int[n+1];
        for(int i =1; i<m+1; i++){
            int temp = dp[0];
            for(int j =1; j<n+1; j++){
                int prev = dp[j];
                if(matrix[i-1][j-1] == '1'){
                  dp[j] = 1+Math.min(temp, Math.min(dp[j-1], dp[j]));
                }else{
                  dp[j] = 0;
                }   
                temp = prev;
                max = Math.max(max, dp[j]);             
            }
        }
        return max*max;
    }
}

